Setting up a basic Laravel and Inertia.js project involves installing the necessary dependencies, configuring the Inertia adapter, and creating a simple page to demonstrate its usage.

Prerequisites:

Laravel installed and configured
Node.js installed and npm accessible
1. Install Inertia.js and Laravel Adapter:

Open your Laravel project's terminal and run the following commands:

cmd line
composer require inertiajs/inertia-laravel
npm install
Use code with caution. Learn more
2. Configure Inertia Adapter:

Publish the Inertia configuration file:

cmd line
php artisan vendor:publish --provider="Inertia\ServiceProvider"
Use code with caution. Learn more
Open the config/inertia.php file and configure the share and version properties as needed.

3. Create a Simple Page:

Create a new controller named HomeController to handle the main page:

cmd line
php artisan make:controller HomeController
Use code with caution. Learn more
In the HomeController class, define a method to handle the route:

PHP
public function index()
{
    return Inertia::render('Home', [
        'message' => 'Welcome to Inertia.js with Laravel!'
    ]);
}
Use code with caution. Learn more
Create a corresponding Blade template named Home.blade.php under the resources/views directory:

HTML
@extends('layouts.app')

@section('content')
    <div class="container">
        <h1>{{ $message }}</h1>
    </div>
@endsection
Use code with caution. Learn more
4. Define Routing:

Open the routes/web.php file and add the route for the HomeController's index method:

PHP
Route::get('/', [HomeController::class, 'index'])->name('home');
Use code with caution. Learn more
5. Run the Application:

Start the Laravel development server:

cmd line
php artisan serve
Use code with caution. Learn more
Open your browser and navigate to http://localhost:8000 to see the rendered page.

Explanation of Inertia.js Usage:

In the HomeController's index method, Inertia::render('Home', [ ... ]) is used to render the Home.blade.php template and pass data to it. The template uses the {{ $message }} expression to display the message data received from the server. This demonstrates how Inertia.js facilitates data-driven UI updates.

The Inertia::render method also implicitly handles server-side routing. When the user visits http://localhost:8000, the HomeController's index method is called, and the Home component is rendered. This illustrates how Inertia.js streamlines client-side routing without the need for complex API configurations.

This simple example highlights the integration of Inertia.js within the Laravel framework, enabling seamless data exchange between the server and client, simplifying routing, and enhancing the overall development process.